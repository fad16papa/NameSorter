@model PaginatedList<NamesModel>

@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="container-fluid">
    <div class="m-3">
        <a asp-controller="TextFile" asp-action="DownloadCacheSortedList">Download File</a>
    </div>

    <form asp-controller="TextFile" asp-action="ViewLoadSortedData" method="get">
        <div class="form-actions no-color">
            <p>
                Find by LastName or GivenName: <input type="text" name="SearchString" value="@ViewData["CurrentFilter"]" />
                <input type="submit" value="Search" class="btn btn-default" /> |
                <a asp-controller="TextFile" asp-action="ViewLoadSortedData">Back to Full List</a>
            </p>
        </div>
    </form>

    <div class="m-1">
        <table class="table table-responsive table-hover align-content-center">
            <thead>
                <tr>
                    <th> S/N </th>
                    <th>
                        <a asp-controller="TextFile" asp-action="ViewLoadSortedData" asp-route-sortOrder="@ViewData["NameSortParm"]" asp-route-currentFilter="@ViewData["CurrentFilter"]">First Name</a>
                    </th>
                    <th>
                        <a asp-controller="TextFile" asp-action="ViewLoadSortedData" asp-route-sortOrder="@ViewData["NameSortParm"]" asp-route-currentFilter="@ViewData["CurrentFilter"]">Last Name</a>
                    </th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @{
                    var counterUser = 1;
                }

                @foreach (var item in Model)
                {
                    <tr>
                        <td>@counterUser</td>
                        <td>@Html.DisplayFor(modelItem => item.FirstName)</td>
                        <td>@Html.DisplayFor(modelItem => item.LastName)</td>
                    </tr>

                    counterUser++;
                }
            </tbody>
        </table>
        @{
            var prevDisabled = !Model.HasPreviousPage ? "disabled" : "";
            var nextDisabled = !Model.HasNextPage ? "disabled" : "";
            var counterPage = Model.PageIndex;
            var lastPage = Model.TotalPages;
        }

        <a asp-controller="TextFile"
            asp-action="ViewLoadSortedData"
            asp-route-sortOrder="@ViewData["CurrentSort"]"
            asp-route-pageNumber="@(Model.PageIndex - 1)"
            asp-route-currentFilter="@ViewData["CurrentFilter"]"
            class="btn btn-default @prevDisabled">
            Previous
        </a>

        <span>
            <label>Page @counterPage of @lastPage</label>
        </span>

        <a asp-controller="TextFile"
            asp-action="ViewLoadSortedData"
            asp-route-sortOrder="@ViewData["CurrentSort"]"
            asp-route-pageNumber="@(Model.PageIndex + 1)"
            asp-route-currentFilter="@ViewData["CurrentFilter"]"
            class="btn btn-default @nextDisabled">
            Next
        </a>
    </div>
</div>